From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ysl3000 <yannicklamprecht@live.de>
Date: Sun, 7 Jun 2020 16:32:16 +0200
Subject: [PATCH] PlayerInfoPacket innerclass made static


diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
new file mode 100644
index 0000000000000000000000000000000000000000..1a7e39f0eb1d0e43a40a0163d6b2654aabeb48db
--- /dev/null
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoPacket.java
@@ -0,0 +1,212 @@
+
+
+package net.minecraft.network.protocol.game;
+
+import com.google.common.base.MoreObjects;
+import com.google.common.collect.Lists;
+import com.mojang.authlib.GameProfile;
+import com.mojang.authlib.properties.Property;
+import java.io.IOException;
+import java.util.Iterator;
+import java.util.List;
+import javax.annotation.Nullable;
+import net.minecraft.network.FriendlyByteBuf;
+import net.minecraft.network.chat.Component;
+import net.minecraft.network.chat.Component.ChatSerializer;
+import net.minecraft.network.protocol.Packet;
+import net.minecraft.server.level.ServerPlayer;
+import net.minecraft.world.level.GameType;
+
+public class ClientboundPlayerInfoPacket implements Packet<ClientGamePacketListener> {
+    public ClientboundPlayerInfoPacket.Action action;
+    public List<ClientboundPlayerInfoPacket.PlayerUpdate> entries = Lists.newArrayList();
+
+    public ClientboundPlayerInfoPacket() {
+    }
+
+    public ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action var0, ServerPlayer... var1) {
+        this.action = var0;
+
+        for (ServerPlayer var5 : var1) {
+            this.entries.add(new PlayerUpdate(var5.getGameProfile(), var5.latency, var5.gameMode.getGameModeForPlayer(), var5.getTabListDisplayName()));
+        }
+
+    }
+
+    public ClientboundPlayerInfoPacket(ClientboundPlayerInfoPacket.Action var0, Iterable<ServerPlayer> var1) {
+        this.action = var0;
+
+        for (ServerPlayer serverPlayer : var1) {
+            this.entries.add(new PlayerUpdate(serverPlayer.getGameProfile(), serverPlayer.latency, serverPlayer.gameMode.getGameModeForPlayer(), serverPlayer.getTabListDisplayName()));
+        }
+
+    }
+
+    public void read(FriendlyByteBuf var0) throws IOException {
+        this.action = var0.readEnum(Action.class);
+        int var1 = var0.readVarInt();
+
+        for(int var2 = 0; var2 < var1; ++var2) {
+            GameProfile var3 = null;
+            int var4 = 0;
+            GameType var5 = null;
+            Component var6 = null;
+            switch(this.action) {
+            case ADD_PLAYER:
+                var3 = new GameProfile(var0.readUUID(), var0.readUtf(16));
+                int var7 = var0.readVarInt();
+                int var8 = 0;
+
+                for(; var8 < var7; ++var8) {
+                    String var9 = var0.readUtf(32767);
+                    String var10 = var0.readUtf(32767);
+                    if (var0.readBoolean()) {
+                        var3.getProperties().put(var9, new Property(var9, var10, var0.readUtf(32767)));
+                    } else {
+                        var3.getProperties().put(var9, new Property(var9, var10));
+                    }
+                }
+
+                var5 = GameType.byId(var0.readVarInt());
+                var4 = var0.readVarInt();
+                if (var0.readBoolean()) {
+                    var6 = var0.readComponent();
+                }
+                break;
+            case UPDATE_GAME_MODE:
+                var3 = new GameProfile(var0.readUUID(), null);
+                var5 = GameType.byId(var0.readVarInt());
+                break;
+            case UPDATE_LATENCY:
+                var3 = new GameProfile(var0.readUUID(), null);
+                var4 = var0.readVarInt();
+                break;
+            case UPDATE_DISPLAY_NAME:
+                var3 = new GameProfile(var0.readUUID(), null);
+                if (var0.readBoolean()) {
+                    var6 = var0.readComponent();
+                }
+                break;
+            case REMOVE_PLAYER:
+                var3 = new GameProfile(var0.readUUID(), null);
+            }
+
+            this.entries.add(new PlayerUpdate(var3, var4, var5, var6));
+        }
+
+    }
+
+    public void write(FriendlyByteBuf var0) throws IOException {
+        var0.writeEnum(this.action);
+        var0.writeVarInt(this.entries.size());
+        Iterator<ClientboundPlayerInfoPacket.PlayerUpdate> var2 = this.entries.iterator();
+
+        while(true) {
+            while(var2.hasNext()) {
+                ClientboundPlayerInfoPacket.PlayerUpdate playerUpdate = var2.next();
+                switch(this.action) {
+                case ADD_PLAYER:
+                    var0.writeUUID(playerUpdate.getProfile().getId());
+                    var0.writeUtf(playerUpdate.getProfile().getName());
+                    var0.writeVarInt(playerUpdate.getProfile().getProperties().size());
+
+                    for (Property property : playerUpdate.getProfile().getProperties().values()) {
+                        var0.writeUtf(property.getName());
+                        var0.writeUtf(property.getValue());
+                        if (property.hasSignature()) {
+                            var0.writeBoolean(true);
+                            var0.writeUtf(property.getSignature());
+                        } else {
+                            var0.writeBoolean(false);
+                        }
+                    }
+
+                    var0.writeVarInt(playerUpdate.getGameType().getId());
+                    var0.writeVarInt(playerUpdate.getLatency());
+                    if (playerUpdate.getDisplayName() == null) {
+                        var0.writeBoolean(false);
+                    } else {
+                        var0.writeBoolean(true);
+                        var0.writeComponent(playerUpdate.getDisplayName());
+                    }
+                    break;
+                case UPDATE_GAME_MODE:
+                    var0.writeUUID(playerUpdate.getProfile().getId());
+                    var0.writeVarInt(playerUpdate.getGameType().getId());
+                    break;
+                case UPDATE_LATENCY:
+                    var0.writeUUID(playerUpdate.getProfile().getId());
+                    var0.writeVarInt(playerUpdate.getLatency());
+                    break;
+                case UPDATE_DISPLAY_NAME:
+                    var0.writeUUID(playerUpdate.getProfile().getId());
+                    if (playerUpdate.getDisplayName() == null) {
+                        var0.writeBoolean(false);
+                    } else {
+                        var0.writeBoolean(true);
+                        var0.writeComponent(playerUpdate.getDisplayName());
+                    }
+                    break;
+                case REMOVE_PLAYER:
+                    var0.writeUUID(playerUpdate.getProfile().getId());
+                }
+            }
+
+            return;
+        }
+    }
+
+    public void handle(ClientGamePacketListener var0) {
+        var0.handlePlayerInfo(this);
+    }
+
+    public String toString() {
+        return MoreObjects.toStringHelper(this).add("action", this.action).add("entries", this.entries).toString();
+    }
+
+    public static class PlayerUpdate {
+        public int latency;
+        public GameType gameMode;
+        public GameProfile profile;
+        public Component displayName;
+
+        public PlayerUpdate(GameProfile var1, int var2, GameType var3, @Nullable Component var4) {
+            this.profile = var1;
+            this.latency = var2;
+            this.gameMode = var3;
+            this.displayName = var4;
+        }
+
+        public GameProfile getProfile() {
+            return this.profile;
+        }
+
+        public int getLatency() {
+            return this.latency;
+        }
+
+        public GameType getGameType() {
+            return this.gameMode;
+        }
+
+        @Nullable
+        public Component getDisplayName() {
+            return this.displayName;
+        }
+
+        public String toString() {
+            return MoreObjects.toStringHelper(this).add("latency", this.latency).add("gameMode", this.gameMode).add("profile", this.profile).add("displayName", this.displayName == null ? null : ChatSerializer.a(this.displayName)).toString();
+        }
+    }
+
+    public enum Action {
+        ADD_PLAYER,
+        UPDATE_GAME_MODE,
+        UPDATE_LATENCY,
+        UPDATE_DISPLAY_NAME,
+        REMOVE_PLAYER;
+
+        Action() {
+        }
+    }
+}
