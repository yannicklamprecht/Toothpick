From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: ysl3000 <yannicklamprecht@live.de>
Date: Sat, 27 Jun 2020 03:09:22 +0200
Subject: [PATCH] fixed logger issues


diff --git a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
index 520abc81589676870a2c77308546da3c2f38ac74..a40ecf82b3045538ba3536899c113bb396106a51 100644
--- a/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
+++ b/src/main/java/com/destroystokyo/paper/gui/RAMDetails.java
@@ -2,7 +2,6 @@ package com.destroystokyo.paper.gui;
 
 import net.minecraft.Util;
 import net.minecraft.server.MinecraftServer;
-import org.bukkit.Bukkit;
 
 import javax.swing.DefaultListCellRenderer;
 import javax.swing.DefaultListSelectionModel;
@@ -60,7 +59,7 @@ public class RAMDetails extends JList<String> {
         Vector<String> vector = new Vector<>();
         vector.add("Memory use: " + (data.getUsedMem() / 1024L / 1024L) + " mb (" + (data.getFree() * 100L / data.getMax()) + "% free)");
         vector.add("Heap: " + (data.getTotal() / 1024L / 1024L) + " / " + (data.getMax() / 1024L / 1024L) + " mb");
-        vector.add("Avg tick: " + DECIMAL_FORMAT.format(getAverage(server.getTickTimes())) + " ms");
+        vector.add("Avg tick: " + DECIMAL_FORMAT.format(getAverage(server.getDimension())) + " ms");
         setListData(vector);
     }
 
diff --git a/src/main/java/net/minecraft/Util.java b/src/main/java/net/minecraft/Util.java
index 5791514a46088435b7d57a933307f0e64e1db70a..ce976ae757bb13910bd5f240c2397d735c837625 100644
--- a/src/main/java/net/minecraft/Util.java
+++ b/src/main/java/net/minecraft/Util.java
@@ -54,7 +54,6 @@ public class Util {
     private static final ExecutorService f = n();
     public static LongSupplier timeSource = System::nanoTime;
     public static final UUID WORKER_COUNT = new UUID(0L, 0L); public static final UUID getNullUUID() {return WORKER_COUNT;} // Paper OBFHELPER
-    private static final Logger LOGGER = LogManager.getLogger();
 
     public static <K, V> Collector<Entry<? extends K, ? extends V>, ?, Map<K, V>> toMap() {
         return Collectors.toMap(Entry::getKey, Entry::getValue);
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 1de6c726ef84d96594b4adf5a967d11982e2d5d8..5524246d3c782ae449006badadf61fc24f943857 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -2,9 +2,6 @@ package net.minecraft.server;
 
 import com.google.common.base.Splitter;
 import com.google.common.collect.ImmutableList;
-import co.aikar.timings.Timings;
-import com.destroystokyo.paper.event.server.PaperServerListPingEvent;
-import com.google.common.base.Stopwatch;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Sets;
@@ -153,9 +150,6 @@ import net.minecraft.world.phys.Vec3;
 import net.minecraft.world.scores.PlayerTeam;
 import net.minecraft.world.scores.Scoreboard;
 import net.minecraft.world.scores.ScoreboardSaveData;
-import org.bukkit.Bukkit;
-import org.bukkit.craftbukkit.CraftServer;
-import org.bukkit.craftbukkit.Main;
 import org.bukkit.event.server.ServerLoadEvent;
 // CraftBukkit end
 import co.aikar.timings.MinecraftTimings; // Paper
@@ -180,7 +174,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     public final DataFixer fixerUpper;
     private String localIp;
     private int port;
-    public final IRegistryCustom.Dimension tickTimes;
+    public final IRegistryCustom.Dimension dimension;
     public final Map<ResourceKey<Level>, ServerLevel> levels;
     private PlayerList playerList;
     private volatile boolean running;
@@ -196,7 +190,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
     private String motd;
     private int F;
     private int maxBuildHeight;
-    public final long[] LOGGER; public long[] getTickTimes() { return LOGGER; } // Paper - OBFHELPER
+    public final long[] ticktimes; public long[] getDimension() { return ticktimes; } // Paper - OBFHELPER
     // Paper start
     public final TickTimes tickTimes5s = new TickTimes(100);
     public final TickTimes tickTimes10s = new TickTimes(200);
@@ -295,7 +289,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
         this.scoreboard = new ServerScoreboard(this);
         this.customBossEvents = new CustomBossEvents();
         this.frameTimer = new FrameTimer();
-        this.tickTimes = iregistrycustom_dimension;
+        this.dimension = iregistrycustom_dimension;
         this.saveData = savedata;
         this.proxy = proxy;
         this.packRepository = resourcepackrepository;
@@ -506,7 +500,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 chunkgenerator = worlddimension.c();
             }
 
-            ResourceKey<DimensionType> typeKey = (ResourceKey) this.tickTimes.a().c(dimensionmanager).orElseThrow(() -> {
+            ResourceKey<DimensionType> typeKey = (ResourceKey) this.dimension.a().c(dimensionmanager).orElseThrow(() -> {
                 return new IllegalStateException("Unregistered dimension type: " + dimensionmanager);
             });
             ResourceKey<Level> worldKey = ResourceKey.a(Registry.ae, dimensionKey.a());
diff --git a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
index bfc426ea39f688f54d8f123253cc52298d177c41..e6078873ace37e55045c352da1e4c2837baff00b 100644
--- a/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
+++ b/src/main/java/net/minecraft/server/dedicated/DedicatedServer.java
@@ -1,19 +1,14 @@
 package net.minecraft.server.dedicated;
 
 import com.google.common.base.Strings;
-import com.google.common.collect.Lists;
 import com.mojang.authlib.GameProfile;
 import com.mojang.authlib.GameProfileRepository;
 import com.mojang.authlib.minecraft.MinecraftSessionService;
 import com.mojang.datafixers.DataFixer;
-import java.io.BufferedReader;
+
 import java.io.IOException;
-import java.io.InputStreamReader;
 import java.net.InetAddress;
 import java.net.Proxy;
-import java.nio.charset.StandardCharsets;
-import java.util.Collections;
-import java.util.List;
 import java.util.Locale;
 import java.util.Optional;
 import java.util.function.BooleanSupplier;
@@ -60,11 +55,9 @@ import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
 // CraftBukkit start
-import java.io.PrintStream;
 import org.apache.logging.log4j.Level;
 
 import org.bukkit.command.CommandSender;
-import org.bukkit.craftbukkit.LoggerOutputStream;
 import co.aikar.timings.MinecraftTimings; // Paper
 import org.bukkit.event.server.ServerCommandEvent;
 import org.bukkit.craftbukkit.util.Waitable;
@@ -193,7 +186,7 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
             this.a_(dedicatedserverproperties.serverIp);
         }
         // Spigot start
-        this.setPlayerList((PlayerList) (new DedicatedPlayerList(this, this.tickTimes, this.worldNBTStorage)));
+        this.setPlayerList((PlayerList) (new DedicatedPlayerList(this, this.dimension, this.worldNBTStorage)));
         org.spigotmc.SpigotConfig.init((java.io.File) options.valueOf("spigot-settings"));
         org.spigotmc.SpigotConfig.registerCommands();
         // Spigot end
@@ -557,11 +550,6 @@ public class DedicatedServer extends MinecraftServer implements ServerInterface
         });
     }
 
-    @Override
-    public boolean isHardcore() {
-        return this.getProperties().broadcastRconToOps;
-    }
-
     @Override
     public boolean shouldInformAdmins() {
         return this.getProperties().broadcastConsoleToOps;
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 0282d758832a158861bf6c87b8ef8dd7765e9b42..3179bfa616abc4c9dbc7eac2ff1e19fc50a29087 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -4,7 +4,6 @@ import com.google.common.annotations.VisibleForTesting;
 import com.google.common.collect.ImmutableList;
 import com.google.common.collect.Iterables;
 import co.aikar.timings.TimingHistory; // Paper
-import co.aikar.timings.Timings; // Paper
 
 import com.destroystokyo.paper.PaperWorldConfig; // Paper
 import com.google.common.collect.Lists;
@@ -1053,7 +1052,7 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Gene
 
                 worldDataServer.a(worldserver1.getWorldBorder().t());
                 worldDataServer.setCustomBossEvents(this.server.getCustomBossEvents().save());
-                convertable.a(this.server.tickTimes, this.worldDataServer, this.server.getPlayerList().getSingleplayerData());
+                convertable.a(this.server.dimension, this.worldDataServer, this.server.getPlayerList().getSingleplayerData());
             }
             // CraftBukkit end
         }
@@ -1086,7 +1085,7 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Gene
 
         worldDataServer.a(worldserver1.getWorldBorder().t());
         worldDataServer.setCustomBossEvents(this.server.getCustomBossEvents().save());
-        convertable.a(this.server.tickTimes, this.worldDataServer, this.server.getPlayerList().getSingleplayerData());
+        convertable.a(this.server.dimension, this.worldDataServer, this.server.getPlayerList().getSingleplayerData());
         // CraftBukkit end
     }
 
diff --git a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
index 61d1a93f0345f26ffb64b4eea3d3381d95e06960..8c74192d7f3c34df7de054aaa8741ee21a3ec20e 100644
--- a/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
+++ b/src/main/java/net/minecraft/world/level/block/entity/CampfireBlockEntity.java
@@ -158,13 +158,13 @@ public class CampfireBlockEntity extends BlockEntity implements Clearable, Ticka
 
     @Override
     public CompoundTag save(CompoundTag nbttagcompound) {
-        this.save(nbttagcompound);
+        this.saveInv(nbttagcompound);
         nbttagcompound.putIntArray("CookingTimes", this.cookingProgress);
         nbttagcompound.putIntArray("CookingTotalTimes", this.cookingTime);
         return nbttagcompound;
     }
 
-    private CompoundTag save(CompoundTag nbttagcompound) {
+    private CompoundTag saveInv(CompoundTag nbttagcompound) {
         super.save(nbttagcompound);
         ContainerHelper.saveAllItems(nbttagcompound, this.items, true);
         return nbttagcompound;
diff --git a/src/main/java/org/bukkit/craftbukkit/CraftServer.java b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
index 978219188d73c3b046bba13228532ed95bbc68e3..a9624b8220ca90aa14f28c5639b290f165eb7096 100644
--- a/src/main/java/org/bukkit/craftbukkit/CraftServer.java
+++ b/src/main/java/org/bukkit/craftbukkit/CraftServer.java
@@ -1139,7 +1139,7 @@ public final class CraftServer implements Server {
             chunkgenerator = worlddimension.c();
         }
 
-        ResourceKey<DimensionType> typeKey = (ResourceKey) console.tickTimes.a().c(dimensionmanager).orElseThrow(() -> {
+        ResourceKey<DimensionType> typeKey = (ResourceKey) console.dimension.a().c(dimensionmanager).orElseThrow(() -> {
             return new IllegalStateException("Unregistered dimension type: " + dimensionmanager);
         });
         ResourceKey<net.minecraft.world.level.Level> worldKey = ResourceKey.a(Registry.ae, new ResourceLocation(name.toLowerCase(java.util.Locale.ENGLISH)));
