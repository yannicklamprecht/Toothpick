From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MiniDigger <admin@minidigger.me>
Date: Sun, 3 May 2020 18:28:02 +0200
Subject: [PATCH] Toothpick

This patch contains changes needed to make paper compile on mojang mappings.
Mostly "bugs" or edgecases in remapping.

diff --git a/.gitignore b/.gitignore
index 67fb370cad6924895a6b27052dbd5c1767e3f0c9..400937f890a350891a63bf5b6a43784ba1fce7bc 100644
--- a/.gitignore
+++ b/.gitignore
@@ -9,6 +9,8 @@ nb*.xml
 
 # we use maven!
 /build.xml
+# and gradle!
+/.gradle
 
 # maven
 /target
diff --git a/src/main/java/net/minecraft/server/EULA.java b/src/main/java/net/minecraft/server/EULA.java
index e9452d5515c3d564a0104eb09e5c0a6b1bb1beb0..65ee95a3f9bf86f1922489636d9639b4c45f8bbc 100644
--- a/src/main/java/net/minecraft/server/EULA.java
+++ b/src/main/java/net/minecraft/server/EULA.java
@@ -8,13 +8,13 @@ import net.minecraft.SharedConstants;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class Eula {
+public class EULA {
 
     private static final Logger LOGGER = LogManager.getLogger();
     private final java.nio.file.Path file;
     private final boolean agreed;
 
-    public Eula(java.nio.file.Path java_nio_file_path) {
+    public EULA(java.nio.file.Path java_nio_file_path) {
         this.file = java_nio_file_path;
         this.agreed = SharedConstants.IS_RUNNING_IN_IDE || this.readFile();
     }
@@ -51,7 +51,7 @@ public class Eula {
 
             return flag;
         } catch (Exception exception) {
-            Eula.LOGGER.warn("Failed to load {}", this.file);
+            EULA.LOGGER.warn("Failed to load {}", this.file);
             this.saveDefaults();
             return false;
         }
@@ -90,7 +90,7 @@ public class Eula {
 
                 }
             } catch (Exception exception) {
-                Eula.LOGGER.warn("Failed to save {}", this.file, exception);
+                EULA.LOGGER.warn("Failed to save {}", this.file, exception);
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index 94eb1f61abf1699733b283a7f86d3cdde751ff9b..0447a582893adfc57a3484083d9d58d65fcf5f6e 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1493,7 +1493,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
             dedicatedserversettings.forceSave();
             java.nio.file.Path java_nio_file_path1 = Paths.get("eula.txt");
-            Eula eula = new Eula(java_nio_file_path1);
+            EULA eula = new EULA(java_nio_file_path1);
 
             if (optionset.has("initSettings")) { // CraftBukkit
                 MinecraftServer.LOGGER.info("Initialized '" + java_nio_file_path.toAbsolutePath().toString() + "' and '" + java_nio_file_path1.toAbsolutePath().toString() + "'");
@@ -1572,7 +1572,7 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
                 dedicatedserver.eraseCache(true);
             }
 
-            Class.forName("net.minecraft.server.VillagerTrades");// Paper - load this sync so it won't fail later async
+            Class.forName("net.minecraft.world.entity.npc.VillagerTrades");// Paper - load this sync so it won't fail later async // Toothpick - reflection fix
             dedicatedserver.serverThread.setPriority(Thread.NORM_PRIORITY+2); // Paper - boost priority
             dedicatedserver.serverThread.start();
             // CraftBukkit end
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index eec98e18639b05f9d40c03f8b8986e772986748a..ba923f1f6f388c9539ca6a1fcf7a2a88e359456f 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1742,7 +1742,7 @@ public class ServerLevel extends net.minecraft.world.level.Level {
         this.getChunkSourceOH().broadcastIncludingSelf(entity, new ClientboundEntityEventPacket(entity, b0));
     }
 
-    @Override
+//    @Override // Toothpick
     public ServerChunkCache getChunkSourceOH() {
         return (ServerChunkCache) super.getChunkSource();
     }
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index e1fdd3c57ee19ec78b9e9ee4d8358be19dff5700..36da3ced2a86e222c624e1c865453d1458da41c1 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -214,7 +214,7 @@ public class ServerGamePacketListenerImpl implements ServerGamePacketListener {
     private long keepAliveChallenge; private void setKeepAliveID(long keepAliveID) { this.keepAliveChallenge = keepAliveID;}; private long getKeepAliveID() {return this.keepAliveChallenge; };  // Paper - OBFHELPER
     // CraftBukkit start - multithreaded fields
     private volatile int chatSpamTickCount;
-    private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(ServerGamePacketListenerImpl.class, "chatThrottle");
+    private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(ServerGamePacketListenerImpl.class, "chatSpamTickCount"); // Toothpick - remap fix
     private final java.util.concurrent.atomic.AtomicInteger tabSpamLimiter = new java.util.concurrent.atomic.AtomicInteger(); // Paper - configurable tab spam limits
     // CraftBukkit end
     private int dropSpamTickCount;
diff --git a/src/main/java/net/minecraft/server/players/GameProfileCache.java b/src/main/java/net/minecraft/server/players/GameProfileCache.java
index 221b1fedfbf9322e64d22ffc7c00b8851a4da82c..845c8b2f3db4c0ba389f2efb9478d2cead1dcf2f 100644
--- a/src/main/java/net/minecraft/server/players/GameProfileCache.java
+++ b/src/main/java/net/minecraft/server/players/GameProfileCache.java
@@ -345,7 +345,7 @@ public class GameProfileCache {
                             return null;
                         }
 
-                        return GameProfileCache.this.new net.minecraft.server.players.GameProfileCache.UserCacheEntry(new GameProfile(uuid, s1), date);
+                        return GameProfileCache.this.new UserCacheEntry(new GameProfile(uuid, s1), date); // Toothpick decomp fix
                     } else {
                         return null;
                     }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 79897fc6802732b862c363027b7199be2056d7ad..b2cdb051ed439ccd597796512bb507964efc09d2 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -313,11 +313,11 @@ public abstract class Entity implements Nameable, CommandSource, KeyedObject { /
         Boolean hardCollides = cachedOverrides.get(this.getClass());
         if (hardCollides == null) {
             try {
-                Object getHardCollisionBoxMethod = Entity.class.getMethod("au");
-                Object getHardCollisionBoxEntityMethod = Entity.class.getMethod("j", Entity.class);
-                if (!this.getClass().getMethod("au").equals(getHardCollisionBoxMethod)) {
+                Object getHardCollisionBoxMethod = Entity.class.getMethod("getCollideBox"); // Toothpick - remap fix
+                Object getHardCollisionBoxEntityMethod = Entity.class.getMethod("getCollideAgainstBox", Entity.class); // Toothpick - remap fix
+                if (!this.getClass().getMethod("getCollideBox").equals(getHardCollisionBoxMethod)) { // Toothpick - remap fix
                     hardCollides = Boolean.TRUE;
-                } else if (!this.getClass().getMethod("j", Entity.class).equals(getHardCollisionBoxEntityMethod)) {
+                } else if (!this.getClass().getMethod("getCollideAgainstBox", Entity.class).equals(getHardCollisionBoxEntityMethod)) { // Toothpick - remap fix
                     hardCollides = Boolean.TRUE;
                 } else {
                     hardCollides = Boolean.FALSE;
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 002ce01ffd204a8fb65cf4c641609ee3809ad95b..f925961ce4e96a301191019c86bf6cc9ceb3edc3 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -118,7 +118,6 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.attribute.CraftAttributeMap;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Player;
 import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.entity.EntityDamageEvent.DamageModifier;
@@ -1297,7 +1296,7 @@ public abstract class LivingEntity extends Entity {
                 }
             }
 
-            EntityResurrectEvent event = new EntityResurrectEvent((LivingEntity) this.getBukkitEntity());
+            EntityResurrectEvent event = new EntityResurrectEvent((org.bukkit.entity.LivingEntity) this.getBukkitEntity());
             event.setCancelled(itemstack == null);
             this.level.getServerOH().getPluginManager().callEvent(event);
 
@@ -1548,7 +1547,7 @@ public abstract class LivingEntity extends Entity {
             org.bukkit.util.Vector delta = new org.bukkit.util.Vector(currentMot.x - vec3d.x, currentMot.y - vec3d.y, currentMot.z - vec3d.z);
             // Restore old velocity to be able to access it in the event
             this.setDeltaMovement(vec3d);
-            if (entity == null || new com.destroystokyo.paper.event.entity.EntityKnockbackByEntityEvent((LivingEntity) getBukkitEntity(), entity.getBukkitEntity(), f, delta).callEvent()) {
+            if (entity == null || new com.destroystokyo.paper.event.entity.EntityKnockbackByEntityEvent((org.bukkit.entity.LivingEntity) getBukkitEntity(), entity.getBukkitEntity(), f, delta).callEvent()) {
                 this.setDeltaMovement(vec3d.x + delta.getX(), vec3d.y + delta.getY(), vec3d.z + delta.getZ());
             }
             // Paper end
diff --git a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
index 84a3037d431b9258b9cb3d96fdfea77ea39f7422..e691f3a9a7c6624d130ca1290bd48bdc1a7bc56d 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
@@ -41,7 +41,6 @@ import net.minecraft.world.phys.Vec3;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.craftbukkit.CraftEquipmentSlot;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.entity.ArmorStand;
 import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerArmorStandManipulateEvent;
 // CraftBukkit end
@@ -451,7 +450,7 @@ public class ArmorStand extends LivingEntity {
             org.bukkit.inventory.ItemStack playerHeldItem = CraftItemStack.asCraftMirror(itemstack);
 
             Player player = (Player) entityhuman.getBukkitEntity();
-            ArmorStand self = (ArmorStand) this.getBukkitEntity();
+            org.bukkit.entity.ArmorStand self = (org.bukkit.entity.ArmorStand) this.getBukkitEntity();
 
             EquipmentSlot slot = CraftEquipmentSlot.getSlot(enumitemslot);
             PlayerArmorStandManipulateEvent armorStandManipulateEvent = new PlayerArmorStandManipulateEvent(player,self,playerHeldItem,armorStandItem,slot);
diff --git a/src/main/java/net/minecraft/world/entity/monster/RangedAttackMob.java b/src/main/java/net/minecraft/world/entity/monster/RangedAttackMob.java
index ea0dd808697d135f88ea7a8ef929489ff4882c0f..a48f896038369d02fd6b78a7d55bb68878d74f36 100644
--- a/src/main/java/net/minecraft/world/entity/monster/RangedAttackMob.java
+++ b/src/main/java/net/minecraft/world/entity/monster/RangedAttackMob.java
@@ -7,5 +7,5 @@ public interface RangedAttackMob {
     void performRangedAttack(LivingEntity entityliving, float f); default void rangedAttack(LivingEntity entityliving, float f) { performRangedAttack(entityliving, f); } // Paper - OBFHELPER
 
     // - see EntitySkeletonAbstract melee goal
-    void q(boolean flag); default void setChargingAttack(boolean charging) { q(charging); }; // Paper
+    void setAggressive(boolean flag); default void setChargingAttack(boolean charging) { setAggressive(charging); }; // Paper
 }
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index 8d24fb86fdf7690cadbe57f2a872bc2db0d637dd..7f3ca4c92a3a103f7fec9a35e46587d9204fe8ad 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -45,7 +45,6 @@ import com.destroystokyo.paper.event.entity.SlimeSwimEvent;
 import com.destroystokyo.paper.event.entity.SlimeTargetLivingEntityEvent;
 import com.destroystokyo.paper.event.entity.SlimeWanderEvent;
 import org.bukkit.entity.LivingEntity;
-import org.bukkit.entity.Slime;
 // Paper end
 // CraftBukkit start
 import java.util.ArrayList;
@@ -407,7 +406,7 @@ public class Slime extends Mob implements Enemy {
 
         @Override
         public boolean canUse() {
-            return !this.a.isPassenger() && this.a.canWander && new SlimeWanderEvent((Slime) this.a.getBukkitEntity()).callEvent(); // Paper
+            return !this.a.isPassenger() && this.a.canWander && new SlimeWanderEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity()).callEvent(); // Paper
         }
 
         @Override
@@ -428,7 +427,7 @@ public class Slime extends Mob implements Enemy {
 
         @Override
         public boolean canUse() {
-            return (this.a.isInWater() || this.a.isInLava()) && this.a.getMoveControl() instanceof net.minecraft.world.entity.monster.Slime.ControllerMoveSlime && this.a.canWander && new SlimeSwimEvent((Slime) this.a.getBukkitEntity()).callEvent(); // Paper
+            return (this.a.isInWater() || this.a.isInLava()) && this.a.getMoveControl() instanceof net.minecraft.world.entity.monster.Slime.ControllerMoveSlime && this.a.canWander && new SlimeSwimEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity()).callEvent(); // Paper
         }
 
         @Override
@@ -462,7 +461,7 @@ public class Slime extends Mob implements Enemy {
             if (--this.c <= 0) {
                 this.c = 40 + this.a.getRandom().nextInt(60);
                 // Paper start
-                SlimeChangeDirectionEvent event = new SlimeChangeDirectionEvent((Slime) this.a.getBukkitEntity(), (float) this.a.getRandom().nextInt(360));
+                SlimeChangeDirectionEvent event = new SlimeChangeDirectionEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity(), (float) this.a.getRandom().nextInt(360));
                 if (!this.a.canWander || !event.callEvent()) return;
                 this.b = event.getNewYaw();
                 // Paper end
@@ -493,7 +492,7 @@ public class Slime extends Mob implements Enemy {
             if (entityliving instanceof Player && ((Player) entityliving).abilities.invulnerable) {
                 return false;
             }
-            return this.a.getMoveControl() instanceof net.minecraft.world.entity.monster.Slime.ControllerMoveSlime && this.a.canWander && new SlimeTargetLivingEntityEvent((Slime) this.a.getBukkitEntity(), (LivingEntity) entityliving.getBukkitEntity()).callEvent();
+            return this.a.getMoveControl() instanceof net.minecraft.world.entity.monster.Slime.ControllerMoveSlime && this.a.canWander && new SlimeTargetLivingEntityEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity(), (LivingEntity) entityliving.getBukkitEntity()).callEvent();
             // Paper end
         }
 
@@ -514,7 +513,7 @@ public class Slime extends Mob implements Enemy {
             if (entityliving instanceof Player && ((Player) entityliving).abilities.invulnerable) {
                 return false;
             }
-            return --this.b > 0 && this.a.canWander && new SlimeTargetLivingEntityEvent((Slime) this.a.getBukkitEntity(), (LivingEntity) entityliving.getBukkitEntity()).callEvent();
+            return --this.b > 0 && this.a.canWander && new SlimeTargetLivingEntityEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity(), (LivingEntity) entityliving.getBukkitEntity()).callEvent();
             // Paper end
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Witch.java b/src/main/java/net/minecraft/world/entity/monster/Witch.java
index 44cbf0acf4155a39ad593a95e6da6b2ec084b775..85d37640e4ddeba2b39c91dc88fc7bbef7e5b93e 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Witch.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Witch.java
@@ -3,7 +3,6 @@ package net.minecraft.world.entity.monster;
 // Paper start
 import com.destroystokyo.paper.event.entity.WitchReadyPotionEvent;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.entity.Witch;
 // Paper end
 
 import java.util.Iterator;
@@ -192,7 +191,7 @@ public class Witch extends Raider implements RangedAttackMob {
 
     // Paper start
     public void setDrinkingPotion(ItemStack potion) {
-        setItemSlot(EquipmentSlot.MAINHAND, CraftItemStack.asNMSCopy(WitchReadyPotionEvent.process((Witch) getBukkitEntity(), CraftItemStack.asCraftMirror(potion))));
+        setItemSlot(EquipmentSlot.MAINHAND, CraftItemStack.asNMSCopy(WitchReadyPotionEvent.process((org.bukkit.entity.Witch) getBukkitEntity(), CraftItemStack.asCraftMirror(potion))));
         setPotionUseTimeLeft(getMainHandItem().getItemUseMaxDuration());
         setDrinkingPotion(true);
         level.sendSoundEffect(null, getX(), getY(), getZ(), SoundEvents.WITCH_DRINK, getSoundSource(), 1.0F, 0.8F + random.nextFloat() * 0.4F);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index fb54868aba4199d34145577530ae264f7f607171..9c3087c711dae2b5f95120634a6cbc6cb22ed9dc 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -68,7 +68,6 @@ import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.entity.Zombie;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.entity.EntityTargetEvent;
@@ -321,7 +320,7 @@ public class Zombie extends Monster {
             entityzombie.setInvulnerable(this.isInvulnerable());
             // CraftBukkit start
             if (CraftEventFactory.callEntityTransformEvent(this, entityzombie, EntityTransformEvent.TransformReason.DROWNED).isCancelled()) {
-                ((Zombie) getBukkitEntity()).setConversionTime(-1); // SPIGOT-5208: End conversion to stop event spam
+                ((org.bukkit.entity.Zombie) getBukkitEntity()).setConversionTime(-1); // SPIGOT-5208: End conversion to stop event spam
                 return;
             }
             // CraftBukkit end
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
index 2035a42742758baad0e857e448008d47b5989fa1..33de1ed2651c4fffc5b180c9d7bdc09b8fc7730b 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
@@ -46,7 +46,6 @@ import net.minecraft.world.level.block.Block;
 import net.minecraft.world.level.block.Blocks;
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.entity.ZombieVillager;
 import org.bukkit.event.entity.EntityTransformEvent;
 // CraftBukkit end
 
@@ -235,7 +234,7 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder {
         entityvillager.setInvulnerable(this.isInvulnerable());
         // CraftBukkit start
         if (CraftEventFactory.callEntityTransformEvent(this, entityvillager, EntityTransformEvent.TransformReason.CURED).isCancelled()) {
-            ((ZombieVillager) getBukkitEntity()).setConversionTime(-1); // SPIGOT-5208: End conversion to stop event spam
+            ((org.bukkit.entity.ZombieVillager) getBukkitEntity()).setConversionTime(-1); // SPIGOT-5208: End conversion to stop event spam
             return;
         }
         if (!new com.destroystokyo.paper.event.entity.EntityTransformedEvent(this.getBukkitEntity(), entityvillager.getBukkitEntity(), com.destroystokyo.paper.event.entity.EntityTransformedEvent.TransformedReason.CURED).callEvent()) return; // Paper
diff --git a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
index 77931df273cfe366dc0c28e655ed6856abc19a8c..a2dfffae017e729fc68ffe022a84dc6156d10105 100644
--- a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
@@ -35,7 +35,6 @@ import net.minecraft.world.level.dimension.DimensionType;
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.inventory.CraftMerchant;
 import org.bukkit.craftbukkit.inventory.CraftMerchantRecipe;
-import org.bukkit.entity.AbstractVillager;
 import org.bukkit.event.entity.VillagerAcquireTradeEvent;
 // CraftBukkit end
 
@@ -276,7 +275,7 @@ public abstract class AbstractVillager extends AgableMob implements Npc, Merchan
 
             if (merchantrecipe != null) {
                 // CraftBukkit start
-                VillagerAcquireTradeEvent event = new VillagerAcquireTradeEvent((AbstractVillager) getBukkitEntity(), merchantrecipe.asBukkit());
+                VillagerAcquireTradeEvent event = new VillagerAcquireTradeEvent((org.bukkit.entity.AbstractVillager) getBukkitEntity(), merchantrecipe.asBukkit());
                 // Suppress during worldgen
                 if (this.valid) {
                     Bukkit.getPluginManager().callEvent(event);
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index d28118851966f3d273fb3bfe4565f156db010015..72069f2154ef4066feed904c03ba0978cab6e88d 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -85,7 +85,6 @@ import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.entity.CraftVillager;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftMerchantRecipe;
-import org.bukkit.entity.Villager;
 import org.bukkit.event.entity.EntityTransformEvent;
 import org.bukkit.event.entity.VillagerAcquireTradeEvent;
 import org.bukkit.event.entity.VillagerReplenishTradeEvent;
@@ -454,7 +453,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
 
                 // CraftBukkit start
                 int bonus = -Mth.floor((float) i * merchantrecipe.getPriceMultiplier());
-                VillagerReplenishTradeEvent event = new VillagerReplenishTradeEvent((Villager) this.getBukkitEntity(), merchantrecipe.asBukkit(), bonus);
+                VillagerReplenishTradeEvent event = new VillagerReplenishTradeEvent((org.bukkit.entity.Villager) this.getBukkitEntity(), merchantrecipe.asBukkit(), bonus);
                 Bukkit.getPluginManager().callEvent(event);
                 if (!event.isCancelled()) {
                     merchantrecipe.addToSpecialPriceDiff(event.getBonus());
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index 4b1035069fe493bfe63a8727afa2052374d0166c..7cd77da3b1f197fa5ecc6c50dc85f6dd195c9a19 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -113,7 +113,6 @@ import net.minecraft.world.scores.Scoreboard;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.util.CraftVector;
 import org.bukkit.entity.Item;
-import org.bukkit.entity.Player;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.player.PlayerBedLeaveEvent;
@@ -694,7 +693,7 @@ public abstract class Player extends LivingEntity {
             }
 
             // CraftBukkit start - fire PlayerDropItemEvent
-            Player player = (Player) this.getBukkitEntity();
+            org.bukkit.entity.Player player = (org.bukkit.entity.Player) this.getBukkitEntity();
             Item drop = (Item) entityitem.getBukkitEntity();
 
             PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
@@ -1151,7 +1150,11 @@ public abstract class Player extends LivingEntity {
 
                 f *= 0.2F + f2 * f2 * 0.8F;
                 f1 *= f2;
-                // this.ey(); // CraftBukkit - Moved to EntityLiving to reset the cooldown after the damage is dealt
+                // Paper start - PlayerAttackEntityCooldownResetEvent
+                if (new com.destroystokyo.paper.event.player.PlayerAttackEntityCooldownResetEvent((org.bukkit.entity.Player) this.getBukkitEntity(), entity.getBukkitEntity(), this.getCooledAttackStrength(0F)).callEvent()) {
+                    this.resetCooldown(); // reset it like normal
+                }
+                // Paper end
                 if (f > 0.0F || f1 > 0.0F) {
                     boolean flag = f2 > 0.9F;
                     boolean flag1 = false;
@@ -1246,7 +1249,7 @@ public abstract class Player extends LivingEntity {
                         if (entity instanceof ServerPlayer && entity.hurtMarked) {
                             // CraftBukkit start - Add Velocity Event
                             boolean cancelled = false;
-                            Player player = (Player) entity.getBukkitEntity();
+                            org.bukkit.entity.Player player = (org.bukkit.entity.Player) entity.getBukkitEntity();
                             org.bukkit.util.Vector velocity = CraftVector.toBukkit(vec3d);
 
                             PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity.clone());
@@ -1453,7 +1456,7 @@ public abstract class Player extends LivingEntity {
             bedResult = Either.right(Unit.INSTANCE);
         }
 
-        if (this.getBukkitEntity() instanceof Player) {
+        if (this.getBukkitEntity() instanceof org.bukkit.entity.Player) {
             bedResult = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerBedEnterEvent(this, blockposition, bedResult);
 
             if (bedResult.left().isPresent()) {
@@ -1502,8 +1505,8 @@ public abstract class Player extends LivingEntity {
         }
 
         // CraftBukkit start - fire PlayerBedLeaveEvent
-        if (this.getBukkitEntity() instanceof Player) {
-            Player player = (Player) this.getBukkitEntity();
+        if (this.getBukkitEntity() instanceof org.bukkit.entity.Player) {
+            org.bukkit.entity.Player player = (org.bukkit.entity.Player) this.getBukkitEntity();
 
             org.bukkit.block.Block bed;
             if (bedPosition != null) {
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index 4b123f1b3fca6da59e02ce990796186b9261a2e6..3511dd961de0529502714b06e1e5cd84fe8a0b0f 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -10,6 +10,7 @@ import com.google.common.base.MoreObjects;
 import com.google.common.collect.Lists;
 import java.io.IOException;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
@@ -955,7 +956,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     @Override
     public boolean noCollision(@Nullable Entity entity, AABB axisAlignedBB) {
         if (entity instanceof ArmorStand && !entity.level.paperConfig.armorStandEntityLookups) return false;
-        return LevelAccessor.super.noCollision(entity, axisAlignedBB);
+        return noCollision(entity, axisAlignedBB, Collections.emptySet());
     }
     // Paper end
 
diff --git a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
index cd0d98190216de94def9431979fc1e6a735a3ba1..4712f3287bbe70352a13bd8ff750d28ea02e1f8c 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
@@ -446,11 +446,11 @@ public class MapItemSavedData extends SavedData {
 
         // Paper start
         private void addSeenPlayers(java.util.Collection<MapDecoration> icons) {
-            org.bukkit.entity.Player player = (org.bukkit.entity.Player) player.getBukkitEntity();
+            org.bukkit.entity.Player bPlayer = (org.bukkit.entity.Player) player.getBukkitEntity();
             MapItemSavedData.this.decorations.forEach((name, mapIcon) -> {
                 // If this cursor is for a player check visibility with vanish system
                 org.bukkit.entity.Player other = org.bukkit.Bukkit.getPlayerExact(name); // Spigot
-                if (other == null || player.canSee(other)) {
+                if (other == null || bPlayer.canSee(other)) {
                     icons.add(mapIcon);
                 }
             });
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
index 51aaaa44e0e4445812e7545648ea5839aa524406..968db1ab1fd6cf662d78a2adeb7b2724d67528a2 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
@@ -166,7 +166,7 @@ public abstract class LootPoolSingletonContainer extends LootPoolEntryContainer
             }
             // This is vanilla
             float qualityModifer = (float) getQuality() * f;
-            double baseWeight = (getWeight() + qualityModifer);
+            double baseWeight = (LootPoolSingletonContainer.this.getWeight() + qualityModifer);
             if (com.destroystokyo.paper.PaperConfig.useAlternativeLuckFormula) {
                 // Random boost to avoid losing precision in the final int cast on return
                 final int weightBoost = 100;
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index d6e5d014c0d81f5f7cff6638ccfc2e983fea53d9..b6125338b164903e8397a7d6f0aa6b348f6f933f 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -314,8 +314,8 @@ public class Main {
             tryPreloadClass("org.slf4j.helpers.Util");
             tryPreloadClass("com.destroystokyo.paper.event.player.PlayerConnectionCloseEvent");
             // Minecraft, seen during saving
-            tryPreloadClass("net.minecraft.server.LightEngineLayerEventListener$Void");
-            tryPreloadClass("net.minecraft.server.LightEngineLayerEventListener");
+            tryPreloadClass("net.minecraft.world.level.lighting:LayerLightEventListener$DummyLightLayerEventListener"); // Toothpick - reflection fix
+            tryPreloadClass("net.minecraft.world.level.lighting:LayerLightEventListener"); // Toothpick - reflection fix
             // Paper end
         }
     }
