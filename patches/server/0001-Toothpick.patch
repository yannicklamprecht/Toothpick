From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: MiniDigger <admin@minidigger.me>
Date: Sun, 3 May 2020 18:28:02 +0200
Subject: [PATCH] Toothpick

This patch contains changes needed to make paper compile on mojang mappings.
Mostly "bugs" or edgecases in remapping.

diff --git a/.gitignore b/.gitignore
index 67fb370cad6924895a6b27052dbd5c1767e3f0c9..400937f890a350891a63bf5b6a43784ba1fce7bc 100644
--- a/.gitignore
+++ b/.gitignore
@@ -9,6 +9,8 @@ nb*.xml
 
 # we use maven!
 /build.xml
+# and gradle!
+/.gradle
 
 # maven
 /target
diff --git a/src/main/java/net/minecraft/server/EULA.java b/src/main/java/net/minecraft/server/EULA.java
index efba226c9697feaba420f8a5a6953db95531d760..7a486c5e6c33d3887d9d27bd94e4aa5e50c61721 100644
--- a/src/main/java/net/minecraft/server/EULA.java
+++ b/src/main/java/net/minecraft/server/EULA.java
@@ -8,13 +8,13 @@ import net.minecraft.SharedConstants;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
-public class Eula {
+public class EULA {
 
     private static final Logger LOGGER = LogManager.getLogger();
     private final java.nio.file.Path file;
     private final boolean agreed;
 
-    public Eula(java.nio.file.Path java_nio_file_path) {
+    public EULA(java.nio.file.Path java_nio_file_path) {
         this.file = java_nio_file_path;
         this.agreed = SharedConstants.CURRENT_VERSION || this.readFile();
     }
@@ -51,7 +51,7 @@ public class Eula {
 
             return flag;
         } catch (Exception exception) {
-            Eula.LOGGER.warn("Failed to load {}", this.file);
+            EULA.LOGGER.warn("Failed to load {}", this.file);
             this.saveDefaults();
             return false;
         }
@@ -90,7 +90,7 @@ public class Eula {
 
                 }
             } catch (Exception exception) {
-                Eula.LOGGER.warn("Failed to save {}", this.file, exception);
+                EULA.LOGGER.warn("Failed to save {}", this.file, exception);
             }
 
         }
diff --git a/src/main/java/net/minecraft/server/MinecraftServer.java b/src/main/java/net/minecraft/server/MinecraftServer.java
index e89516360cb2eec68fdc5633d4bc4e32dab1bfc9..1de6c726ef84d96594b4adf5a967d11982e2d5d8 100644
--- a/src/main/java/net/minecraft/server/MinecraftServer.java
+++ b/src/main/java/net/minecraft/server/MinecraftServer.java
@@ -1496,6 +1496,139 @@ public abstract class MinecraftServer extends ReentrantBlockableEventLoop<TickTa
 
     protected void setLocalIp(String s) {
         this.ai = s;
+
+    }
+    public static void main(final OptionSet optionset) { // CraftBukkit - replaces main(String[] astring)
+        /* CraftBukkit start - Replace everything
+        OptionParser optionparser = new OptionParser();
+        OptionSpec<Void> optionspec = optionparser.accepts("nogui");
+        OptionSpec<Void> optionspec1 = optionparser.accepts("initSettings", "Initializes 'server.properties' and 'eula.txt', then quits");
+        OptionSpec<Void> optionspec2 = optionparser.accepts("demo");
+        OptionSpec<Void> optionspec3 = optionparser.accepts("bonusChest");
+        OptionSpec<Void> optionspec4 = optionparser.accepts("forceUpgrade");
+        OptionSpec<Void> optionspec5 = optionparser.accepts("eraseCache");
+        OptionSpec<Void> optionspec6 = optionparser.accepts("help").forHelp();
+        OptionSpec<String> optionspec7 = optionparser.accepts("singleplayer").withRequiredArg();
+        OptionSpec<String> optionspec8 = optionparser.accepts("universe").withRequiredArg().defaultsTo(".", new String[0]);
+        OptionSpec<String> optionspec9 = optionparser.accepts("world").withRequiredArg();
+        OptionSpec<Integer> optionspec10 = optionparser.accepts("port").withRequiredArg().ofType(Integer.class).defaultsTo(-1, new Integer[0]);
+        OptionSpec<String> optionspec11 = optionparser.accepts("serverId").withRequiredArg();
+        NonOptionArgumentSpec nonoptionargumentspec = optionparser.nonOptions();
+
+        try {
+            OptionSet optionset = optionparser.parse(astring);
+
+            if (optionset.has(optionspec6)) {
+                optionparser.printHelpOn(System.err);
+                return;
+            }
+            */ // CraftBukkit end
+
+        try {
+            java.nio.file.Path java_nio_file_path = Paths.get("server.properties");
+            DedicatedServerSettings dedicatedserversettings = new DedicatedServerSettings(optionset); // CraftBukkit - CLI argument support
+
+            dedicatedserversettings.forceSave();
+            java.nio.file.Path java_nio_file_path1 = Paths.get("eula.txt");
+            EULA eula = new EULA(java_nio_file_path1);
+
+            if (optionset.has("initSettings")) { // CraftBukkit
+                MinecraftServer.LOGGER.info("Initialized '" + java_nio_file_path.toAbsolutePath().toString() + "' and '" + java_nio_file_path1.toAbsolutePath().toString() + "'");
+                return;
+            }
+
+            // Spigot Start
+            boolean eulaAgreed = Boolean.getBoolean( "com.mojang.eula.agree" );
+            if ( eulaAgreed )
+            {
+                System.err.println( "You have used the Spigot command line EULA agreement flag." );
+                System.err.println( "By using this setting you are indicating your agreement to Mojang's EULA (https://account.mojang.com/documents/minecraft_eula)." );
+                System.err.println( "If you do not agree to the above EULA please stop your server and remove this flag immediately." );
+            }
+            // Spigot End
+            if (!eula.hasAgreedToEULA() && !eulaAgreed) { // Spigot
+                MinecraftServer.LOGGER.info("You need to agree to the EULA in order to run the server. Go to eula.txt for more info.");
+                return;
+            }
+
+            CrashReport.preload();
+            Bootstrap.bootStrap();
+            Bootstrap.validate();
+            File s = (File) optionset.valueOf("universe"); // CraftBukkit
+            YggdrasilAuthenticationService yggdrasilauthenticationservice = new com.destroystokyo.paper.profile.PaperAuthenticationService(Proxy.NO_PROXY, UUID.randomUUID().toString()); // Paper
+            MinecraftSessionService minecraftsessionservice = yggdrasilauthenticationservice.createMinecraftSessionService();
+            GameProfileRepository gameprofilerepository = yggdrasilauthenticationservice.createProfileRepository();
+            GameProfileCache usercache = new GameProfileCache(gameprofilerepository, new File(s, MinecraftServer.USERID_CACHE_FILE.getName()));
+            // CraftBukkit start
+            String s1 = (String) Optional.ofNullable(optionset.valueOf("world")).orElse(dedicatedserversettings.getProperties().levelName);
+            final DedicatedServer dedicatedserver = new DedicatedServer(optionset, dedicatedserversettings, DataFixers.getDataFixerOH(), yggdrasilauthenticationservice, minecraftsessionservice, gameprofilerepository, usercache, LoggerChunkProgressListener::new, s1);
+
+            /*
+            dedicatedserver.i((String) optionset.valueOf(optionspec7));
+            dedicatedserver.setPort((Integer) optionset.valueOf(optionspec10));
+            dedicatedserver.e(optionset.has(optionspec2));
+            dedicatedserver.f(optionset.has(optionspec3));
+            dedicatedserver.setForceUpgrade(optionset.has(optionspec4));
+            dedicatedserver.setEraseCache(optionset.has(optionspec5));
+            dedicatedserver.c((String) optionset.valueOf(optionspec11));
+            */
+            boolean flag = !optionset.has("nogui") && !optionset.nonOptionArguments().contains("nogui");
+
+            if (flag && !GraphicsEnvironment.isHeadless()) {
+                dedicatedserver.showGui();
+            }
+
+            /*
+            dedicatedserver.startServerThread();
+            Thread thread = new Thread("Server Shutdown Thread") {
+                public void run() {
+                    dedicatedserver.safeShutdown(true);
+                }
+            };
+
+            thread.setUncaughtExceptionHandler(new DefaultUncaughtExceptionHandler(MinecraftServer.LOGGER));
+            Runtime.getRuntime().addShutdownHook(thread);
+            */
+
+            if (optionset.has("port")) {
+                int port = (Integer) optionset.valueOf("port");
+                if (port > 0) {
+                    dedicatedserver.setPort(port);
+                }
+            }
+
+            if (optionset.has("universe")) {
+                dedicatedserver.universe = (File) optionset.valueOf("universe");
+            }
+
+            if (optionset.has("forceUpgrade")) {
+                dedicatedserver.forceUpgrade(true);
+            }
+
+            if (optionset.has("eraseCache")) {
+                dedicatedserver.eraseCache(true);
+            }
+
+            Class.forName("net.minecraft.world.entity.npc.VillagerTrades");// Paper - load this sync so it won't fail later async // Toothpick - reflection fix
+            dedicatedserver.serverThread.setPriority(Thread.NORM_PRIORITY+2); // Paper - boost priority
+            dedicatedserver.serverThread.start();
+            // CraftBukkit end
+        } catch (Exception exception) {
+            MinecraftServer.LOGGER.fatal("Failed to start the minecraft server", exception);
+        }
+
+    }
+
+    protected void setId(String s) {
+        this.serverId = s;
+    }
+
+    protected void forceUpgrade(boolean flag) {
+        this.forceUpgrade = flag;
+    }
+
+    protected void eraseCache(boolean flag) {
+        this.eraseCache = flag;
     }
 
     public File c(String s) {
diff --git a/src/main/java/net/minecraft/server/level/ServerLevel.java b/src/main/java/net/minecraft/server/level/ServerLevel.java
index 5e43ed065ce145303797e23d9ff97c2703104710..0282d758832a158861bf6c87b8ef8dd7765e9b42 100644
--- a/src/main/java/net/minecraft/server/level/ServerLevel.java
+++ b/src/main/java/net/minecraft/server/level/ServerLevel.java
@@ -1625,7 +1625,7 @@ public class ServerLevel extends net.minecraft.world.level.Level implements Gene
         this.getChunkSourceOH().broadcastIncludingSelf(entity, new ClientboundEntityEventPacket(entity, b0));
     }
 
-    @Override
+//    @Override // Toothpick
     public ServerChunkCache getChunkSourceOH() {
         return this.chunkProvider;
     }
diff --git a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
index 53b8b3a79f601eafd97ed908e9926c5d5ec546b3..071482c4786623ec172c470e3a8e74b4b795dd46 100644
--- a/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
+++ b/src/main/java/net/minecraft/server/network/ServerGamePacketListenerImpl.java
@@ -219,7 +219,7 @@ public class ServerGamePacketListenerImpl implements ServerGamePacketListener {
     private long keepAliveChallenge; private void setKeepAliveID(long keepAliveID) { this.keepAliveChallenge = keepAliveID;}; private long getKeepAliveID() {return this.keepAliveChallenge; };  // Paper - OBFHELPER
     // CraftBukkit start - multithreaded fields
     private volatile int chatSpamTickCount;
-    private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(ServerGamePacketListenerImpl.class, "chatThrottle");
+    private static final AtomicIntegerFieldUpdater chatSpamField = AtomicIntegerFieldUpdater.newUpdater(ServerGamePacketListenerImpl.class, "chatSpamTickCount"); // Toothpick - remap fix
     private final java.util.concurrent.atomic.AtomicInteger tabSpamLimiter = new java.util.concurrent.atomic.AtomicInteger(); // Paper - configurable tab spam limits
     // CraftBukkit end
     private int dropSpamTickCount;
diff --git a/src/main/java/net/minecraft/server/players/GameProfileCache.java b/src/main/java/net/minecraft/server/players/GameProfileCache.java
index 7525b91e88d43397d95abcf4a983566e87d0d6f1..eca184d67c40d47bd55c39748067c80bc4cf40fb 100644
--- a/src/main/java/net/minecraft/server/players/GameProfileCache.java
+++ b/src/main/java/net/minecraft/server/players/GameProfileCache.java
@@ -334,7 +334,7 @@ public class GameProfileCache {
                             return null;
                         }
 
-                        return GameProfileCache.this.new net.minecraft.server.players.GameProfileCache.UserCacheEntry(new GameProfile(uuid, s1), date);
+                        return GameProfileCache.this.new UserCacheEntry(new GameProfile(uuid, s1), date); // Toothpick decomp fix
                     } else {
                         return null;
                     }
diff --git a/src/main/java/net/minecraft/world/entity/Entity.java b/src/main/java/net/minecraft/world/entity/Entity.java
index 3ca4dc453d43e0c5ff2466834031ed441581d531..41d2c87f86a9871c19670c48c10aedb6b38d6b1e 100644
--- a/src/main/java/net/minecraft/world/entity/Entity.java
+++ b/src/main/java/net/minecraft/world/entity/Entity.java
@@ -314,11 +314,11 @@ public abstract class Entity implements Nameable, CommandSource, KeyedObject { /
         Boolean hardCollides = cachedOverrides.get(this.getClass());
         if (hardCollides == null) {
             try {
-                Object getHardCollisionBoxMethod = Entity.class.getMethod("ay");
-                Object getHardCollisionBoxEntityMethod = Entity.class.getMethod("j", Entity.class);
-                if (!this.getClass().getMethod("ay").equals(getHardCollisionBoxMethod)) {
+                Object getHardCollisionBoxMethod = Entity.class.getMethod("getCollideBox"); // Toothpick - remap fix
+                Object getHardCollisionBoxEntityMethod = Entity.class.getMethod("getCollideAgainstBox", Entity.class); // Toothpick - remap fix
+                if (!this.getClass().getMethod("getCollideBox").equals(getHardCollisionBoxMethod)) { // Toothpick - remap fix
                     hardCollides = Boolean.TRUE;
-                } else if (!this.getClass().getMethod("j", Entity.class).equals(getHardCollisionBoxEntityMethod)) {
+                } else if (!this.getClass().getMethod("getCollideAgainstBox", Entity.class).equals(getHardCollisionBoxEntityMethod)) { // Toothpick - remap fix
                     hardCollides = Boolean.TRUE;
                 } else {
                     hardCollides = Boolean.FALSE;
diff --git a/src/main/java/net/minecraft/world/entity/LivingEntity.java b/src/main/java/net/minecraft/world/entity/LivingEntity.java
index 0194e3a15bafdb7909aa7374a5e686a7c946bf64..de2e3e3eaf7ca593afdf3ad4d244f226cd941f6f 100644
--- a/src/main/java/net/minecraft/world/entity/LivingEntity.java
+++ b/src/main/java/net/minecraft/world/entity/LivingEntity.java
@@ -120,7 +120,6 @@ import org.bukkit.Location;
 import org.bukkit.craftbukkit.attribute.CraftAttributeMap;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.entity.LivingEntity;
 import org.bukkit.entity.Player;
 import org.bukkit.event.entity.EntityDamageEvent;
 import org.bukkit.event.entity.EntityDamageEvent.DamageModifier;
@@ -1409,7 +1408,7 @@ public abstract class LivingEntity extends Entity {
                 }
             }
 
-            EntityResurrectEvent event = new EntityResurrectEvent((LivingEntity) this.getBukkitEntity());
+            EntityResurrectEvent event = new EntityResurrectEvent((org.bukkit.entity.LivingEntity) this.getBukkitEntity());
             event.setCancelled(itemstack == null);
             this.level.getServerOH().getPluginManager().callEvent(event);
 
@@ -1661,7 +1660,7 @@ public abstract class LivingEntity extends Entity {
             org.bukkit.util.Vector delta = new org.bukkit.util.Vector(currentMot.x - vec3d.x, currentMot.y - vec3d.y, currentMot.z - vec3d.z);
             // Restore old velocity to be able to access it in the event
             this.setDeltaMovement(vec3d);
-            if (knockingBackEntity == null || new com.destroystokyo.paper.event.entity.EntityKnockbackByEntityEvent((LivingEntity) getBukkitEntity(), knockingBackEntity.getBukkitEntity(), f, delta).callEvent()) {
+            if (entity == null || new com.destroystokyo.paper.event.entity.EntityKnockbackByEntityEvent((org.bukkit.entity.LivingEntity) getBukkitEntity(), entity.getBukkitEntity(), f, delta).callEvent()) {
                 this.setDeltaMovement(vec3d.x + delta.getX(), vec3d.y + delta.getY(), vec3d.z + delta.getZ());
             }
             // Paper end
diff --git a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
index 61d6c40cd23da7814cca3039199de76ff82d1350..d675fd8265033981472bf3790f15251a4a8fbdbd 100644
--- a/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
+++ b/src/main/java/net/minecraft/world/entity/decoration/ArmorStand.java
@@ -40,7 +40,6 @@ import net.minecraft.world.phys.Vec3;
 import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.craftbukkit.CraftEquipmentSlot;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.entity.ArmorStand;
 import org.bukkit.entity.Player;
 import org.bukkit.event.player.PlayerArmorStandManipulateEvent;
 // CraftBukkit end
@@ -450,7 +449,7 @@ public class ArmorStand extends LivingEntity {
             org.bukkit.inventory.ItemStack playerHeldItem = CraftItemStack.asCraftMirror(itemstack);
 
             Player player = (Player) entityhuman.getBukkitEntity();
-            ArmorStand self = (ArmorStand) this.getBukkitEntity();
+            org.bukkit.entity.ArmorStand self = (org.bukkit.entity.ArmorStand) this.getBukkitEntity();
 
             EquipmentSlot slot = CraftEquipmentSlot.getSlot(enumitemslot);
             PlayerArmorStandManipulateEvent armorStandManipulateEvent = new PlayerArmorStandManipulateEvent(player,self,playerHeldItem,armorStandItem,slot);
diff --git a/src/main/java/net/minecraft/world/entity/monster/Slime.java b/src/main/java/net/minecraft/world/entity/monster/Slime.java
index 8fc8fdfbcb718e433841077c3ca850a89e3a7247..7c5563180a226ff8e4d1ebcc4ef8351194211726 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Slime.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Slime.java
@@ -46,7 +46,6 @@ import com.destroystokyo.paper.event.entity.SlimeSwimEvent;
 import com.destroystokyo.paper.event.entity.SlimeTargetLivingEntityEvent;
 import com.destroystokyo.paper.event.entity.SlimeWanderEvent;
 import org.bukkit.entity.LivingEntity;
-import org.bukkit.entity.Slime;
 // Paper end
 // CraftBukkit start
 import java.util.ArrayList;
@@ -409,7 +408,7 @@ public class Slime extends Mob implements Enemy {
 
         @Override
         public boolean canUse() {
-            return !this.a.isPassenger() && this.a.canWander && new SlimeWanderEvent((Slime) this.a.getBukkitEntity()).callEvent(); // Paper
+            return !this.a.isPassenger() && this.a.canWander && new SlimeWanderEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity()).callEvent(); // Paper
         }
 
         @Override
@@ -430,7 +429,7 @@ public class Slime extends Mob implements Enemy {
 
         @Override
         public boolean canUse() {
-            return (this.a.isInWater() || this.a.aN()) && this.a.getMoveControl() instanceof net.minecraft.world.entity.monster.Slime.ControllerMoveSlime && this.a.canWander && new SlimeSwimEvent((Slime) this.a.getBukkitEntity()).callEvent(); // Paper
+            return (this.a.isInWater() || this.a.aN()) && this.a.getMoveControl() instanceof net.minecraft.world.entity.monster.Slime.ControllerMoveSlime && this.a.canWander && new SlimeSwimEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity()).callEvent(); // Paper
         }
 
         @Override
@@ -464,7 +463,7 @@ public class Slime extends Mob implements Enemy {
             if (--this.c <= 0) {
                 this.c = 40 + this.a.getRandom().nextInt(60);
                 // Paper start
-                SlimeChangeDirectionEvent event = new SlimeChangeDirectionEvent((Slime) this.a.getBukkitEntity(), (float) this.a.getRandom().nextInt(360));
+                SlimeChangeDirectionEvent event = new SlimeChangeDirectionEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity(), (float) this.a.getRandom().nextInt(360));
                 if (!this.a.canWander || !event.callEvent()) return;
                 this.b = event.getNewYaw();
                 // Paper end
@@ -495,7 +494,7 @@ public class Slime extends Mob implements Enemy {
             if (entityliving instanceof Player && ((Player) entityliving).abilities.invulnerable) {
                 return false;
             }
-            return this.a.getMoveControl() instanceof net.minecraft.world.entity.monster.Slime.ControllerMoveSlime && this.a.canWander && new SlimeTargetLivingEntityEvent((Slime) this.a.getBukkitEntity(), (LivingEntity) entityliving.getBukkitEntity()).callEvent();
+            return this.a.getMoveControl() instanceof net.minecraft.world.entity.monster.Slime.ControllerMoveSlime && this.a.canWander && new SlimeTargetLivingEntityEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity(), (LivingEntity) entityliving.getBukkitEntity()).callEvent();
             // Paper end
         }
 
@@ -516,7 +515,7 @@ public class Slime extends Mob implements Enemy {
             if (entityliving instanceof Player && ((Player) entityliving).abilities.invulnerable) {
                 return false;
             }
-            return --this.b > 0 && this.a.canWander && new SlimeTargetLivingEntityEvent((Slime) this.a.getBukkitEntity(), (LivingEntity) entityliving.getBukkitEntity()).callEvent();
+            return --this.b > 0 && this.a.canWander && new SlimeTargetLivingEntityEvent((org.bukkit.entity.Slime) this.a.getBukkitEntity(), (LivingEntity) entityliving.getBukkitEntity()).callEvent();
             // Paper end
         }
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/Witch.java b/src/main/java/net/minecraft/world/entity/monster/Witch.java
index 1e8af31a14100be9f9b53742f0d485b22f43ccb8..8a84b938e50faaf7de61d2b36921b202c3e5b8d0 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Witch.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Witch.java
@@ -3,7 +3,6 @@ package net.minecraft.world.entity.monster;
 // Paper start
 import com.destroystokyo.paper.event.entity.WitchReadyPotionEvent;
 import org.bukkit.craftbukkit.inventory.CraftItemStack;
-import org.bukkit.entity.Witch;
 // Paper end
 
 import java.util.Iterator;
@@ -193,7 +192,7 @@ public class Witch extends Raider implements RangedAttackMob {
 
     // Paper start - moved to its own method
     public void setDrinkingPotion(ItemStack potion) {
-        setItemSlot(EquipmentSlot.MAINHAND, CraftItemStack.asNMSCopy(WitchReadyPotionEvent.process((Witch) getBukkitEntity(), CraftItemStack.asCraftMirror(potion))));
+        setItemSlot(EquipmentSlot.MAINHAND, CraftItemStack.asNMSCopy(WitchReadyPotionEvent.process((org.bukkit.entity.Witch) getBukkitEntity(), CraftItemStack.asCraftMirror(potion))));
         setPotionUseTimeLeft(getMainHandItem().getItemUseMaxDuration());
         setDrinkingPotion(true);
         if (!this.isSilent()) {
diff --git a/src/main/java/net/minecraft/world/entity/monster/Zombie.java b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
index c082c4e4c34e28975bd6752890753dc2215c2261..a40c82eafc0fc24456cb25efe1d92835444df840 100644
--- a/src/main/java/net/minecraft/world/entity/monster/Zombie.java
+++ b/src/main/java/net/minecraft/world/entity/monster/Zombie.java
@@ -67,7 +67,6 @@ import net.minecraft.world.level.block.Blocks;
 import net.minecraft.world.level.block.state.BlockState;
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.entity.Zombie;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.entity.EntityTargetEvent;
@@ -272,14 +271,64 @@ public class Zombie extends Monster {
     }
     // Paper end
 
+
     protected void eQ() {
         this.c(EntityType.DROWNED);
         if (!this.isSilent()) {
             this.level.levelEvent((Player) null, 1040, this.getCommandSenderBlockPosition(), 0);
+
         }
+    }
 
+    protected void doUnderWaterConversion() {
+        this.convertTo(EntityType.DROWNED);
+        this.level.levelEvent((Player) null, 1040, new BlockPos(this), 0);
     }
 
+    protected void convertTo(EntityType<? extends net.minecraft.world.entity.monster.Zombie> entitytypes) {
+        if (!this.removed) {
+            net.minecraft.world.entity.monster.Zombie entityzombie = (net.minecraft.world.entity.monster.Zombie) entitytypes.create(this.level);
+
+            entityzombie.copyPosition(this);
+            entityzombie.setCanPickUpLoot(this.canPickUpLoot());
+            entityzombie.setCanBreakDoors(entityzombie.supportsBreakDoorGoal() && this.canBreakDoors());
+            entityzombie.handleAttributes(entityzombie.level.getDamageScaler(new BlockPos(entityzombie)).getSpecialMultiplier());
+            entityzombie.setBaby(this.isBaby());
+            entityzombie.setNoAi(this.isNoAi());
+            EquipmentSlot[] aenumitemslot = EquipmentSlot.values();
+            int i = aenumitemslot.length;
+
+            for (int j = 0; j < i; ++j) {
+                EquipmentSlot enumitemslot = aenumitemslot[j];
+                ItemStack itemstack = this.getItemBySlot(enumitemslot);
+
+                if (!itemstack.isEmpty()) {
+                    entityzombie.setItemSlot(enumitemslot, itemstack.copy());
+                    entityzombie.setDropChance(enumitemslot, this.getEquipmentDropChance(enumitemslot));
+                    itemstack.setCount(0);
+                }
+            }
+
+            if (this.hasCustomName()) {
+                entityzombie.setCustomName(this.getCustomName());
+                entityzombie.setCustomNameVisible(this.isCustomNameVisible());
+            }
+
+            if (this.isPersistenceRequired()) {
+                entityzombie.setPersistenceRequired();
+            }
+
+            entityzombie.setInvulnerable(this.isInvulnerable());
+            // CraftBukkit start
+            if (CraftEventFactory.callEntityTransformEvent(this, entityzombie, EntityTransformEvent.TransformReason.DROWNED).isCancelled()) {
+                ((org.bukkit.entity.Zombie) getBukkitEntity()).setConversionTime(-1); // SPIGOT-5208: End conversion to stop event spam
+                return;
+            }
+            // CraftBukkit end
+            if (!new com.destroystokyo.paper.event.entity.EntityTransformedEvent(this.getBukkitEntity(), entityzombie.getBukkitEntity(), com.destroystokyo.paper.event.entity.EntityTransformedEvent.TransformedReason.DROWNED).callEvent()) return; // Paper
+            this.level.addEntity(entityzombie, CreatureSpawnEvent.SpawnReason.DROWNED); // CraftBukkit - added spawn reason
+            this.remove();
+
     protected void c(EntityType<? extends net.minecraft.world.entity.monster.Zombie> entitytypes) {
         net.minecraft.world.entity.monster.Zombie entityzombie = (net.minecraft.world.entity.monster.Zombie) this.b(entitytypes);
 
diff --git a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
index 1c62fd423af62241b0d4abfc467e4137ababdd80..15ee0ab34cbb58f5f2b7701d9cb03fa290be85e9 100644
--- a/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
+++ b/src/main/java/net/minecraft/world/entity/monster/ZombieVillager.java
@@ -49,7 +49,6 @@ import net.minecraft.world.level.block.Blocks;
 import org.apache.logging.log4j.Logger;
 // CraftBukkit start
 import org.bukkit.craftbukkit.event.CraftEventFactory;
-import org.bukkit.entity.ZombieVillager;
 import org.bukkit.event.entity.EntityTransformEvent;
 // CraftBukkit end
 
@@ -251,7 +250,7 @@ public class ZombieVillager extends Zombie implements VillagerDataHolder {
         entityvillager.setInvulnerable(this.isInvulnerable());
         // CraftBukkit start
         if (CraftEventFactory.callEntityTransformEvent(this, entityvillager, EntityTransformEvent.TransformReason.CURED).isCancelled()) {
-            ((ZombieVillager) getBukkitEntity()).setConversionTime(-1); // SPIGOT-5208: End conversion to stop event spam
+            ((org.bukkit.entity.ZombieVillager) getBukkitEntity()).setConversionTime(-1); // SPIGOT-5208: End conversion to stop event spam
             return;
         }
         if (!new com.destroystokyo.paper.event.entity.EntityTransformedEvent(this.getBukkitEntity(), entityvillager.getBukkitEntity(), com.destroystokyo.paper.event.entity.EntityTransformedEvent.TransformedReason.CURED).callEvent()) return; // Paper
diff --git a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
index 967592f2a1e3f78937aab14f9079eb19bc3c58c7..282e6f7d205d6cd10cb59ec41ee59517085a9bf8 100644
--- a/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/AbstractVillager.java
@@ -35,7 +35,6 @@ import net.minecraft.world.level.pathfinder.BlockPathTypes;
 import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.inventory.CraftMerchant;
 import org.bukkit.craftbukkit.inventory.CraftMerchantRecipe;
-import org.bukkit.entity.AbstractVillager;
 import org.bukkit.event.entity.VillagerAcquireTradeEvent;
 // CraftBukkit end
 
@@ -259,7 +258,7 @@ public abstract class AbstractVillager extends AgableMob implements Npc, Merchan
 
             if (merchantrecipe != null) {
                 // CraftBukkit start
-                VillagerAcquireTradeEvent event = new VillagerAcquireTradeEvent((AbstractVillager) getBukkitEntity(), merchantrecipe.asBukkit());
+                VillagerAcquireTradeEvent event = new VillagerAcquireTradeEvent((org.bukkit.entity.AbstractVillager) getBukkitEntity(), merchantrecipe.asBukkit());
                 // Suppress during worldgen
                 if (this.valid) {
                     Bukkit.getPluginManager().callEvent(event);
diff --git a/src/main/java/net/minecraft/world/entity/npc/Villager.java b/src/main/java/net/minecraft/world/entity/npc/Villager.java
index 9641a51c74acd102f50691d1816f07b4812bac51..5a0a75b53612fa43c86ef4eb2d00c5ec65c803aa 100644
--- a/src/main/java/net/minecraft/world/entity/npc/Villager.java
+++ b/src/main/java/net/minecraft/world/entity/npc/Villager.java
@@ -91,7 +91,6 @@ import org.bukkit.Bukkit;
 import org.bukkit.craftbukkit.entity.CraftVillager;
 import org.bukkit.craftbukkit.event.CraftEventFactory;
 import org.bukkit.craftbukkit.inventory.CraftMerchantRecipe;
-import org.bukkit.entity.Villager;
 import org.bukkit.event.entity.EntityTransformEvent;
 import org.bukkit.event.entity.VillagerAcquireTradeEvent;
 import org.bukkit.event.entity.VillagerReplenishTradeEvent;
@@ -461,7 +460,7 @@ public class Villager extends AbstractVillager implements ReputationEventHandler
 
                 // CraftBukkit start
                 int bonus = -Mth.floor((float) i * merchantrecipe.getPriceMultiplier());
-                VillagerReplenishTradeEvent event = new VillagerReplenishTradeEvent((Villager) this.getBukkitEntity(), merchantrecipe.asBukkit(), bonus);
+                VillagerReplenishTradeEvent event = new VillagerReplenishTradeEvent((org.bukkit.entity.Villager) this.getBukkitEntity(), merchantrecipe.asBukkit(), bonus);
                 Bukkit.getPluginManager().callEvent(event);
                 if (!event.isCancelled()) {
                     merchantrecipe.addToSpecialPriceDiff(event.getBonus());
diff --git a/src/main/java/net/minecraft/world/entity/player/Player.java b/src/main/java/net/minecraft/world/entity/player/Player.java
index cb70ed4ea6a9ebc17114fdb461dc6a1d999709c7..3ebb977e96f3c0e8135c278bb3b996423d30cc85 100644
--- a/src/main/java/net/minecraft/world/entity/player/Player.java
+++ b/src/main/java/net/minecraft/world/entity/player/Player.java
@@ -115,7 +115,6 @@ import net.minecraft.world.scores.Scoreboard;
 import org.bukkit.craftbukkit.entity.CraftHumanEntity;
 import org.bukkit.craftbukkit.util.CraftVector;
 import org.bukkit.entity.Item;
-import org.bukkit.entity.Player;
 import org.bukkit.event.entity.CreatureSpawnEvent;
 import org.bukkit.event.entity.EntityCombustByEntityEvent;
 import org.bukkit.event.player.PlayerBedLeaveEvent;
@@ -675,7 +674,7 @@ public abstract class Player extends LivingEntity {
             }
 
             // CraftBukkit start - fire PlayerDropItemEvent
-            Player player = (Player) this.getBukkitEntity();
+            org.bukkit.entity.Player player = (org.bukkit.entity.Player) this.getBukkitEntity();
             Item drop = (Item) entityitem.getBukkitEntity();
 
             PlayerDropItemEvent event = new PlayerDropItemEvent(player, drop);
@@ -1131,7 +1130,12 @@ public abstract class Player extends LivingEntity {
 
                 f *= 0.2F + f2 * f2 * 0.8F;
                 f1 *= f2;
-                // this.resetAttackCooldown(); // CraftBukkit - Moved to EntityLiving to reset the cooldown after the damage is dealt
+                // Paper start - PlayerAttackEntityCooldownResetEvent
+                if (new com.destroystokyo.paper.event.player.PlayerAttackEntityCooldownResetEvent((org.bukkit.entity.Player) this.getBukkitEntity(), entity.getBukkitEntity(), this.getCooledAttackStrength(0F)).callEvent()) {
+                    this.resetCooldown(); // reset it like normal
+                }
+                // Paper end
+
                 if (f > 0.0F || f1 > 0.0F) {
                     boolean flag = f2 > 0.9F;
                     boolean flag1 = false;
@@ -1230,7 +1234,7 @@ public abstract class Player extends LivingEntity {
                         if (entity instanceof ServerPlayer && entity.hurtMarked) {
                             // CraftBukkit start - Add Velocity Event
                             boolean cancelled = false;
-                            Player player = (Player) entity.getBukkitEntity();
+                            org.bukkit.entity.Player player = (org.bukkit.entity.Player) entity.getBukkitEntity();
                             org.bukkit.util.Vector velocity = CraftVector.toBukkit(vec3d);
 
                             PlayerVelocityEvent event = new PlayerVelocityEvent(player, velocity.clone());
@@ -1385,6 +1389,27 @@ public abstract class Player extends LivingEntity {
     }
 
     public Either<net.minecraft.world.entity.player.Player.BedSleepingProblem, Unit> sleep(BlockPos blockposition, boolean force) {
+<<<<<<< HEAD
+=======
+        Direction enumdirection = (Direction) this.level.getBlockState(blockposition).getValue(HorizontalDirectionalBlock.FACING);
+        Either<net.minecraft.world.entity.player.Player.BedSleepingProblem, Unit> bedResult = this.getBedResult(blockposition, enumdirection);
+
+        if (bedResult.left().orElse(null) == net.minecraft.world.entity.player.Player.BedSleepingProblem.OTHER_PROBLEM) {
+            return bedResult; // return immediately if the result is not bypassable by plugins
+        }
+
+        if (force) {
+            bedResult = Either.right(Unit.INSTANCE);
+        }
+
+        if (this.getBukkitEntity() instanceof org.bukkit.entity.Player) {
+            bedResult = org.bukkit.craftbukkit.event.CraftEventFactory.callPlayerBedEnterEvent(this, blockposition, bedResult);
+
+            if (bedResult.left().isPresent()) {
+                return bedResult;
+            }
+        }
+>>>>>>> Toothpick
         // CraftBukkit end
         this.startSleeping(blockposition);
         this.sleepCounter = 0;
@@ -1399,8 +1424,8 @@ public abstract class Player extends LivingEntity {
         }
 
         // CraftBukkit start - fire PlayerBedLeaveEvent
-        if (this.getBukkitEntity() instanceof Player) {
-            Player player = (Player) this.getBukkitEntity();
+        if (this.getBukkitEntity() instanceof org.bukkit.entity.Player) {
+            org.bukkit.entity.Player player = (org.bukkit.entity.Player) this.getBukkitEntity();
 
             org.bukkit.block.Block bed;
             if (bedPosition != null) {
diff --git a/src/main/java/net/minecraft/world/level/Level.java b/src/main/java/net/minecraft/world/level/Level.java
index b66de5579832882b402b367499912031ad609be5..6a189d4108ea80dce87fbd549b3f8c8349d095d8 100644
--- a/src/main/java/net/minecraft/world/level/Level.java
+++ b/src/main/java/net/minecraft/world/level/Level.java
@@ -11,6 +11,7 @@ import com.google.common.collect.Lists;
 import com.mojang.serialization.Codec;
 import java.io.IOException;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
 import java.util.Random;
@@ -1009,7 +1010,7 @@ public abstract class Level implements LevelAccessor, AutoCloseable {
     @Override
     public boolean noCollision(@Nullable Entity entity, AABB axisAlignedBB) {
         if (entity instanceof ArmorStand && !entity.level.paperConfig.armorStandEntityLookups) return false;
-        return LevelAccessor.super.noCollision(entity, axisAlignedBB);
+        return noCollision(entity, axisAlignedBB, Collections.emptySet());
     }
     // Paper end
 
diff --git a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
index 4523957ecb4b657fcf11317e59eedb465bd00756..55af254f9d4ac770d1476bb169cecf90fff88732 100644
--- a/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
+++ b/src/main/java/net/minecraft/world/level/saveddata/maps/MapItemSavedData.java
@@ -456,11 +456,11 @@ public class MapItemSavedData extends SavedData {
 
         // Paper start
         private void addSeenPlayers(java.util.Collection<MapDecoration> icons) {
-            org.bukkit.entity.Player player = (org.bukkit.entity.Player) player.getBukkitEntity();
+            org.bukkit.entity.Player bPlayer = (org.bukkit.entity.Player) player.getBukkitEntity();
             MapItemSavedData.this.decorations.forEach((name, mapIcon) -> {
                 // If this cursor is for a player check visibility with vanish system
                 org.bukkit.entity.Player other = org.bukkit.Bukkit.getPlayerExact(name); // Spigot
-                if (other == null || player.canSee(other)) {
+                if (other == null || bPlayer.canSee(other)) {
                     icons.add(mapIcon);
                 }
             });
diff --git a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
index 8b1e635ec79500e73d02a5491dd4bb35bc7cb57a..e80630c5a2b6df4a62c71a469fb5f3c2f3495db9 100644
--- a/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
+++ b/src/main/java/net/minecraft/world/level/storage/loot/entries/LootPoolSingletonContainer.java
@@ -163,7 +163,7 @@ public abstract class LootPoolSingletonContainer extends LootPoolEntryContainer
             }
             // This is vanilla
             float qualityModifer = (float) getQuality() * f;
-            double baseWeight = (getWeight() + qualityModifer);
+            double baseWeight = (LootPoolSingletonContainer.this.getWeight() + qualityModifer);
             if (com.destroystokyo.paper.PaperConfig.useAlternativeLuckFormula) {
                 // Random boost to avoid losing precision in the final int cast on return
                 final int weightBoost = 100;
diff --git a/src/main/java/org/bukkit/craftbukkit/Main.java b/src/main/java/org/bukkit/craftbukkit/Main.java
index feb45475bb3c0785a8d8198615fbf4b3cd99acbe..fe8e2b17a6517c699a58c048187ca02d119b4ed1 100644
--- a/src/main/java/org/bukkit/craftbukkit/Main.java
+++ b/src/main/java/org/bukkit/craftbukkit/Main.java
@@ -314,8 +314,8 @@ public class Main {
             tryPreloadClass("org.slf4j.helpers.Util");
             tryPreloadClass("com.destroystokyo.paper.event.player.PlayerConnectionCloseEvent");
             // Minecraft, seen during saving
-            tryPreloadClass("net.minecraft.server.LightEngineLayerEventListener$Void");
-            tryPreloadClass("net.minecraft.server.LightEngineLayerEventListener");
+            tryPreloadClass("net.minecraft.world.level.lighting:LayerLightEventListener$DummyLightLayerEventListener"); // Toothpick - reflection fix
+            tryPreloadClass("net.minecraft.world.level.lighting:LayerLightEventListener"); // Toothpick - reflection fix
             // Paper end
         }
     }
